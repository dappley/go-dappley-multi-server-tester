---

- hosts: all
  become: true
  become_user: ubuntu
  environment:
    GOPATH: "/home/ubuntu/go"
    GOROOT: "/usr/local/go"
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/go/bin:/home/ubuntu/go/bin"
  vars:
    account1: account_1_address
    account2: account_2_address
    invalid_address: thisistheaddressofaninvalidaddress

  tasks:
# #################### Blockchain setup ####################

#   ## Send account.dat file to Node1 && Node2
#   - name: Accounts.dat to Node1
#     copy:
#       src: /var/lib/jenkins/workspace/go-dappley-ansible-accounts/node1/accounts.dat
#       dest: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/bin/
#     when: inventory_hostname in groups['NODE1']

#   - name: Accounts.dat to Node2
#     copy:
#       src: /var/lib/jenkins/workspace/go-dappley-ansible-accounts/node2/accounts.dat
#       dest: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/bin/
#     when: inventory_hostname in groups['NODE2']

#   - name: Make build
#     make:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley
#       target: build
#       file: /home/ubuntu/go/src/github.com/dappley/go-dappley/Makefile

#   ## Launch blockchain 
#   - name: Launch node1
#     shell: ./dapp -f conf/node1.conf
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
#     when: inventory_hostname in groups['NODE1']
#     async: 320
#     poll: 0

#   - name: Launch node2
#     shell: ./dapp -f conf/node2.conf
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
#     when: inventory_hostname in groups['NODE2']
#     async: 320
#     poll: 0

#   - name: Launch node3
#     shell: ./dapp -f conf/node3.conf
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
#     when: inventory_hostname in groups['NODE3']
#     async: 320
#     poll: 0

#   - name: Launch node4
#     shell: ./dapp -f conf/node4.conf
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
#     when: inventory_hostname in groups['NODE4']
#     async: 320
#     poll: 0

#   - name: Launch node5
#     shell: ./dapp -f conf/node5.conf
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
#     when: inventory_hostname in groups['NODE5']
#     async: 320
#     poll: 0

#   - name: Wait 10 seconds to launch blockchain
#     wait_for:
#       timeout: 10

#   - name: Wait til the blockchain reaches height of 10
#     shell: ./cli getBlockchainInfo
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: blockchainHeight
#     until: (blockchainHeight.stdout_lines[1][17:]|replace(',',''))|int > (10)|int
#     retries: 20
#     delay: 10

#   - debug:
#       msg: "Blockchain height: {{ blockchainHeight.stdout_lines[1][17:]|replace(',','') }}"

#   ## Check account1 && account2 balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   ## SendFromMiner to account1 
#   - name: Send money to account1
#     shell: ./cli sendFromMiner -to {{ account1 }} -amount 1000
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     when: inventory_hostname in groups['NODE1']

#   - name: Wait 10 seconds to complete transaction
#     wait_for:
#       timeout: 10

#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

# #################### Invalid Amount ####################

#   ## Send more than the amount in account1
#   - name: Send more than account1 has to account2
#     shell: ./cli send -from {{ account1 }} -to {{ account2 }} -amount 5000
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: transaction_result
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ transaction_result.stdout_lines }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but returned {{ transaction_result.stdout_lines }}"
#     ignore_errors: true
#     when: inventory_hostname in groups['NODE1'] and transaction_result.stdout_lines[0][12:] != "the balance is insufficient"

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 1000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 1000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   ## Send negative value
#   - name: Send negative value
#     shell: ./cli send -from {{ account1 }} -to {{ account2 }} -amount -100
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: transaction_result
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ transaction_result.stdout_lines }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but returned {{ transaction_result.stdout_lines }}"
#     ignore_errors: true
#     when: inventory_hostname in groups['NODE1'] and transaction_result.stdout_lines[0][12:] != "the balance is insufficient"

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 1000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 1000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   ## Send zero value
#   - name: Send zero value
#     shell: ./cli send -from {{ account1 }} -to {{ account2 }} -amount 0
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: transaction_result
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ transaction_result.stdout_lines }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to success but returned {{ transaction_result.stdout_lines }}"
#     ignore_errors: true
#     when: inventory_hostname in groups['NODE1'] and transaction_result.stdout_lines[0] != "Transaction is sent! Pending approval from network."

#   - name: Wait 10 seconds to complete transaction
#     wait_for:
#       timeout: 10

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 1000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 1000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   ## No transaction amount
#   - name: No transaction amount
#     shell: ./cli send -from {{ account1 }} -to {{ account2 }} -amount
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: transaction_result
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ transaction_result.stderr[:22] }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected a warning message but returned {{ transaction_result.stderr }}"
#     ignore_errors: true
#     when: inventory_hostname in groups['NODE1'] and transaction_result.stderr[:22] != "flag needs an argument"

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 1000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 1000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true


# #################### Invalid Tip ####################

#   ## Negative tip
#   - name: Send negative tip amount
#     shell: ./cli send -from {{ account1 }} -to {{ account2 }} -tip -100
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: transaction_result
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ transaction_result.stderr_lines[0][:34] }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but the transaction is approved."
#     ignore_errors: true
#     when: inventory_hostname in groups['NODE1'] and transaction_result.stderr_lines[0][:34] != "invalid value \"-100\" for flag -tip"

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 1000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 1000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   ## Tip amount equal to the balance
#   - name: Tip amount equal to the balance
#     shell: ./cli send -from {{ account1 }} -to {{ account2 }} -tip 1000
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: transaction_result
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ transaction_result.stdout_lines }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but the transaction is approved."
#     ignore_errors: true
#     when: inventory_hostname in groups['NODE1'] and transaction_result.stdout_lines[0] != "Transaction is sent! Pending approval from network."

#   - name: Wait 10 seconds to complete transaction
#     wait_for:
#       timeout: 10

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 1000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   ## More tip amount than the balance
#   - name: More tip amount than the balance
#     shell: ./cli send -from {{ account1 }} -to {{ account2 }} -tip 5000
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: transaction_result
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ transaction_result.stdout_lines }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but the transaction is approved."
#     ignore_errors: true
#     when: inventory_hostname in groups['NODE1'] and transaction_result.stdout_lines[0][12:] != "the balance is insufficient"

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 1000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   ## No tip amount
#   - name: No tip amount
#     shell: ./cli send -from {{ account1 }} -to {{ account2 }} -tip
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: transaction_result
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ transaction_result.stderr_lines[0] }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but the transaction is approved."
#     ignore_errors: true
#     when: inventory_hostname in groups['NODE1'] and transaction_result.stderr_lines[0][:22] != "flag needs an argument"

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 1000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

# #################### Add Balance ####################

#   ## SendFromMiner to account1 
#   - name: Send money to account1
#     shell: ./cli sendFromMiner -to {{ account1 }} -amount 200100
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     when: inventory_hostname in groups['NODE1']

#   - name: Wait 10 seconds to complete transaction
#     wait_for:
#       timeout: 10

#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'


# #################### Invalid File ####################
#   - name: Create smart contract with an invalid file
#     shell: ./cli send -from {{ account1 }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -file ../jslib/invalid_file.js
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: smart_contract
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ smart_contract.stdout }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail: 
#      msg: "Expected the transaction to fail but returned {{ smart_contract.stdout }}"
#     when: inventory_hostname in groups['NODE1'] and smart_contract.stdout[7:] != "smart contract path \"../jslib/invalid_file.js\" is invalid."
#     ignore_errors: true

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200100 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200100|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

# #################### Create Smart Contract ####################
#   - name: Create smart contract
#     shell: ./cli send -from {{ account1 }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -file ../jslib/step_recorder.js
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: smart_contract
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ smart_contract.stdout_lines[0][18:] }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Wait 10 seconds to complete transaction
#     wait_for:
#       timeout: 10

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true


# #################### Invalid Gas Limit ####################

#   ## Over balance gas limit
#   - name: Over balance gas limit
#     shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 300000 -gasPrice 1 -data '{"function":"record","args":["account_2_address","500"]}'
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: deploy_contract
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ deploy_contract }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but returned {{ deploy_contract.stdout }}"
#     when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout[12:] != "the balance is insufficient"
#     ignore_errors: true

#   - name: Wait 10 seconds to complete transaction
#     wait_for:
#       timeout: 10

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   ## Negative gas limit
#   - name: Negative gas limit
#     shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit -30000 -gasPrice 1 -data '{"function":"record","args":["account_2_address","500"]}'
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: deploy_contract
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ deploy_contract.stderr_lines[0][:41] }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but returned {{ deploy_contract.stderr_lines[0] }}"
#     when: inventory_hostname in groups['NODE1'] and deploy_contract.stderr_lines[0][:41] != "invalid value \"-30000\" for flag -gasLimit"
#     ignore_errors: true

#   - name: Wait 10 seconds to complete transaction
#     wait_for:
#       timeout: 10

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   ## Zero gas limit
#   - name: Zero gas limit
#     shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 0 -gasPrice 1 -data '{"function":"record","args":["account_2_address","500"]}'
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: deploy_contract
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ deploy_contract }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but returned {{ deploy_contract.stdout }}"
#     when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout[7:] != "transaction verification failed"
#     ignore_errors: true

#   - name: Wait 10 seconds to complete transaction
#     wait_for:
#       timeout: 10

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   ## Insufficient gas limit
#   - name: Insufficient gas limit
#     shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 10000 -gasPrice 1 -data '{"function":"record","args":["account_2_address","500"]}'
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: deploy_contract
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ deploy_contract }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but returned {{ deploy_contract.stdout }}"
#     when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout[7:] != "transaction verification failed"
#     ignore_errors: true

#   - name: Wait 10 seconds to complete transaction
#     wait_for:
#       timeout: 10

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   ## No gas limit
#   - name: No gas limit
#     shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasPrice 1 -data '{"function":"record","args":["account_2_address","500"]}' -gasLimit 
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: deploy_contract
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ deploy_contract.stderr_lines[0] }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but returned {{ deploy_contract.stderr_lines[0] }}"
#     when: inventory_hostname in groups['NODE1'] and deploy_contract.stderr_lines[0][:22] != "flag needs an argument"
#     ignore_errors: true

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true


# #################### Invalid Gas Price ####################

#   ## Over balance gas price
#   - name: Over balance gas price
#     shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 20 -data '{"function":"record","args":["account_2_address","500"]}'
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: deploy_contract
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ deploy_contract.stdout }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but returned {{ deploy_contract.stdout }}"
#     when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout[12:] != "the balance is insufficient"
#     ignore_errors: true

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   ## Zero gas price
#   - name: Zero gas price
#     shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 0 -data '{"function":"record","args":["account_2_address","500"]}'
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: deploy_contract
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ deploy_contract.stdout }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but returned {{ deploy_contract.stdout }}"
#     when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout[7:] != "gas price error, must be a positive number"
#     ignore_errors: true

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   ## Negative gas price
#   - name: Negative gas price
#     shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice -1 -data '{"function":"record","args":["account_2_address","500"]}'
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: deploy_contract
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ deploy_contract.stderr_lines[0] }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but returned {{ deploy_contract.stdout }}"
#     when: inventory_hostname in groups['NODE1'] and deploy_contract.stderr_lines[0][:37] != "invalid value \"-1\" for flag -gasPrice"
#     ignore_errors: true

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   ## No gas price
#   - name: No gas price
#     shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000  -data '{"function":"record","args":["account_2_address","500"]}' -gasPrice 
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: deploy_contract
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ deploy_contract.stderr_lines[0] }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but returned {{ deploy_contract.stdout }}"
#     when: inventory_hostname in groups['NODE1'] and deploy_contract.stderr_lines[0][:22] != "flag needs an argument"
#     ignore_errors: true

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true


# #################### Invalid Data ####################

#   ## No address in data 1
#   - name: No address in data 1
#     shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"function":"record","args":[ ,"500"]}'
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: deploy_contract
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ deploy_contract.stdout }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but is approved."
#     when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout[7:] != "error syntax"
#     ignore_errors: true

#   - name: Wait 10 seconds to complete transaction
#     wait_for:
#       timeout: 10

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   #  ------------------------------------------------------------

#   ######### Fail :: The transaction still gets approved with negative amount, but the recipient's balance doen't increase ##########
#   # Negative amount in data
#   - name: Negative amount in data
#     shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"function":"record","args":["account_2_address","-500"]}'
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: deploy_contract
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ deploy_contract }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but has been approved."
#     when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout == "Transaction is sent! Pending approval from network."
#     ignore_errors: true

#   - name: Wait 10 seconds to complete transaction
#     wait_for:
#       timeout: 10

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   #  ------------------------------------------------------------

#   ########## Fail :: The transaction gets approved however the recipient's balance doesn't increase ##########
#   # Amount is more than what miner has
#   - name: Get miner address
#     shell: ./cli getBlockchainInfo
#     args: 
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: miner_address
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ miner_address.stdout_lines[3] }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Get miner balance
#     shell: ./cli getBalance -address {{miner_address.stdout_lines[3][5:39]}}
#     args: 
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: miner_balance
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: 'Miner blanace: {{ miner_balance.stdout_lines[0][16:] }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Over balance amount in data
#     shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"function":"record","args":["account_2_address","{{ miner_balance.stdout_lines[0][16:] + miner_balance.stdout_lines[0][16:]}}"]}'
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: deploy_contract
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ deploy_contract }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but has been approved."
#     when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout == "Transaction is sent! Pending approval from network."
#     ignore_errors: true

#   - name: Wait 10 seconds to complete transaction
#     wait_for:
#       timeout: 10

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   #  ------------------------------------------------------------

#   ########## Fail :: Transaction still gets processed, but the recipient's balance doesn't increase ##########
#   # Amount in data is in string
#   - name: Amount is string in data
#     shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"function":"record","args":["account_2_address","five hundred"]}'
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: deploy_contract
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ deploy_contract }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but has been approved."
#     when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout == "Transaction is sent! Pending approval from network."
#     ignore_errors: true

#   - name: Wait 10 seconds to complete transaction
#     wait_for:
#       timeout: 10

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   #  ------------------------------------------------------------

#   ## No balance amount in data 1
#   - name: Invalid amount in data 1
#     shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"function":"record","args":["account_2_address", ]}'
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: deploy_contract
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ deploy_contract }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but is approved."
#     when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout[7:] != "error syntax"
#     ignore_errors: true

#   - name: Wait 10 seconds to complete transaction
#     wait_for:
#       timeout: 10

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   #  ------------------------------------------------------------

#   ########## Fail :: Transaction gets approved but the account balance is stableized ##########
#   ## No balance amount in data 2
#   - name: Invalid address in data 2
#     shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"function":"record","args":["account_2_address"]}'
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: deploy_contract
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ deploy_contract }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but has been approved."
#     when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout == "Transaction is sent! Pending approval from network."
#     ignore_errors: true

#   - name: Wait 10 seconds to complete transaction
#     wait_for:
#       timeout: 10

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   #  ------------------------------------------------------------

#   ## Invalid arguments
#   - name: Invalid arguments in data
#     shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"this":"is","test":["account_2_address","500"]}'
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: deploy_contract
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ deploy_contract }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but returned {{ deploy_contract.stdout }}"
#     when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout[7:] != "error syntax"
#     ignore_errors: true

#   - name: Wait 10 seconds to complete transaction
#     wait_for:
#       timeout: 10

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   #  ------------------------------------------------------------

#   ## No data
#   - name: Invalid address in data
#     shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data 
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: deploy_contract
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ deploy_contract.stderr_lines[0] }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but returned {{ deploy_contract.stderr_lines[0] }}"
#     when: inventory_hostname in groups['NODE1'] and deploy_contract.stderr_lines[0][:22] != "flag needs an argument"
#     ignore_errors: true

#   - name: Wait 10 seconds to complete transaction
#     wait_for:
#       timeout: 10

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true


# #################### Missing Flag ####################

#   ## No flag
#   - name: No flag
#     shell: ./cli send 
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: transaction_result
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ transaction_result }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but the transaction is approved."
#     ignore_errors: true
#     when: inventory_hostname in groups['NODE1'] and transaction_result.stdout_lines[0] == "Transaction is sent! Pending approval from network."

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   ## -From and -GasPrice
#   - name: Only -from and -gasPrice as flag
#     shell: ./cli send -from {{ account1 }} -gasPrice 1
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: transaction_result
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ transaction_result }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but the transaction is approved."
#     ignore_errors: true
#     when: inventory_hostname in groups['NODE1'] and transaction_result.stdout_lines[1] == "Transaction is sent! Pending approval from network."

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   ## -From, -GasPrice and -Amount
#   - name: Only -from, -gasPrice and -amount as flag
#     shell: ./cli send -from {{ account1 }} -gasPrice 1 -amount 100
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: transaction_result
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ transaction_result }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but the transaction is approved."
#     ignore_errors: true
#     when: inventory_hostname in groups['NODE1'] and transaction_result.stdout_lines[1] == "Transaction is sent! Pending approval from network."

#   - name: Wait 10 seconds to complete transaction
#     wait_for:
#       timeout: 10

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

# #################### Send From Wrong Node ####################

#   ## Deploy transaction from a different node
#   - name: Deploy transaction from the node without the account.dat file
#     shell: ./cli send -from {{ account1 }} -to {{ account2 }} -amount 100
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: transaction_result
#     when: inventory_hostname in groups['NODE5']

#   - debug:
#       msg: '{{ transaction_result.stdout_lines }}'
#     when: inventory_hostname in groups['NODE5']

#   - name: Transaction Test
#     fail:
#      msg: "Expected the transaction to fail but returned {{ transaction_result.stdout_lines }}"
#     when: inventory_hostname in groups['NODE5'] and transaction_result.stdout_lines[0][7:] != "invalid account address."
#     ignore_errors: true

# #################### Invalid Addresses ####################

#   ## Send to an invalid address
#   - name: Send to an invalid address
#     shell: ./cli send -from {{ account1 }} -to {{ invalid_address }} -amount 100
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: transaction_result
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ transaction_result.stdout }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected a warning or an error message, but the transaction is approved."
#     ignore_errors: true
#     when: inventory_hostname in groups['NODE1'] and transaction_result.stdout == "Transaction is sent! Pending approval from network."

#   - name: Wait 10 seconds to complete transaction
#     wait_for:
#       timeout: 10

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   ## Send from an invalid address
#   - name: Send from an invalid address
#     shell: ./cli send -from {{ invalid_address }} -to {{ account1 }} -amount 100
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: transaction_result
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ transaction_result.stdout_lines[0] }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected an error message but returned {{ transaction_result.stdout_lines[0] }}"
#     ignore_errors: true
#     when: inventory_hostname in groups['NODE1'] and transaction_result.stdout_lines[0][7:] != "'from' address is not valid!"

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

#   ## Send from and to an invalid address
#   - name: Send from and to the invalid address
#     shell: ./cli send -from {{ invalid_address }} -to {{ invalid_address }} -amount 100
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: transaction_result
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ transaction_result.stdout_lines[0] }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Transaction Test
#     fail:
#      msg: "Expected an error message but returned {{ transaction_result.stdout_lines[0] }}"
#     ignore_errors: true
#     when: inventory_hostname in groups['NODE1'] and transaction_result.stdout_lines[0][7:] != "'from' address is not valid!"

#   ## Check accounts balance
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected 200000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int != 200000|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 0|int
#     ignore_errors: true

# #################### Closing ####################

#   ## Wait for the tasks to terminate
#   - name: Wait till async tasks terminate
#     wait_for:
#       timeout: 10

#   ## Remove the db files and account.dat
#   - name: Remove /go-dappley/bin All Nodes
#     shell: rm -r bin
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/

#   - name: Remove /go-dappley/dapp/bin Node1
#     shell: rm -r bin
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/
#     when: inventory_hostname in groups['NODE1']

#   - name: Remove /go-dappley/dapp/bin Node2
#     shell: rm -r bin
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/
#     when: inventory_hostname in groups['NODE2']

################### Test cases that crashes the blockchain ####################

  ## Send account.dat file to Node1 && Node2
  - name: Accounts.dat to Node1
    copy:
      src: /var/lib/jenkins/workspace/go-dappley-ansible-accounts/node1/accounts.dat
      dest: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/bin/
    when: inventory_hostname in groups['NODE1']

  - name: Accounts.dat to Node2
    copy:
      src: /var/lib/jenkins/workspace/go-dappley-ansible-accounts/node2/accounts.dat
      dest: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/bin/
    when: inventory_hostname in groups['NODE2']

  - name: Make build
    make:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley
      target: build
      file: /home/ubuntu/go/src/github.com/dappley/go-dappley/Makefile

  ## Launch blockchain 
  - name: Launch node1
    shell: ./dapp -f conf/node1.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE1']
    async: 150
    poll: 0

  - name: Launch node2
    shell: ./dapp -f conf/node2.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE2']
    async: 150
    poll: 0

  - name: Launch node3
    shell: ./dapp -f conf/node3.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE3']
    async: 150
    poll: 0

  - name: Launch node4
    shell: ./dapp -f conf/node4.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE4']
    async: 150
    poll: 0

  - name: Launch node5
    shell: ./dapp -f conf/node5.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE5']
    async: 150
    poll: 0

  - name: Wait 10 seconds to launch blockchain
    wait_for:
      timeout: 10

  - name: Wait til the blockchain reaches height of 10
    shell: ./cli getBlockchainInfo
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: blockchainHeight
    until: (blockchainHeight.stdout_lines[1][17:]|replace(',',''))|int > (10)|int
    retries: 20
    delay: 10

  - debug:
      msg: "Blockchain height: {{ blockchainHeight.stdout_lines[1][17:]|replace(',','') }}"

  ## Check account1 && account2 balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  ## SendFromMiner to account1 
  - name: Send money to account1
    shell: ./cli sendFromMiner -to {{ account1 }} -amount 100100
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    when: inventory_hostname in groups['NODE1']

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#################### Create Smart Contract ####################
  - name: Create smart contract
    shell: ./cli send -from {{ account1 }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -file ../jslib/step_recorder.js
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: smart_contract
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ smart_contract.stdout_lines[0][18:] }}'
    when: inventory_hostname in groups['NODE1']

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  ## Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 100000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 100000|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  ########## Fail :: This test results in unstable account balance [balance never stablizes] ##########
  ## Invalid address in data
  - name: Invalid address in data
    shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"function":"record","args":["thisistheaddressofaninvalidaddress","500"]}'
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: deploy_contract
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ deploy_contract }}'
    when: inventory_hostname in groups['NODE1']

  - name: Transaction Test
    fail:
     msg: "Expected the transaction to fail but has been approved."
    when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout == "Transaction is sent! Pending approval from network."
    ignore_errors: true

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  # Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 100000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 100000|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  - name: Wait 10 seconds
    wait_for:
      timeout: 10

  # Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 100000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 100000|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  - name: Wait 10 seconds
    wait_for:
      timeout: 10

  # Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 100000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 100000|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  - name: Wait 10 seconds
    wait_for:
      timeout: 10

  # Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 100000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 100000|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  - name: Wait 10 seconds
    wait_for:
      timeout: 10

  # Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 100000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 100000|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  ## Wait for the tasks to terminate
  - name: Wait till async tasks terminate
    wait_for:
      timeout: 20

  ## Remove the db files and account.dat
  - name: Remove /go-dappley/bin All Nodes
    shell: rm -r bin
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/

  - name: Remove /go-dappley/dapp/bin Node1
    shell: rm -r bin
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/
    when: inventory_hostname in groups['NODE1']

  - name: Remove /go-dappley/dapp/bin Node2
    shell: rm -r bin
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/
    when: inventory_hostname in groups['NODE2']

  #  ------------------------------------------------------------

  ## Send account.dat file to Node1 && Node2
  - name: Accounts.dat to Node1
    copy:
      src: /var/lib/jenkins/workspace/go-dappley-ansible-accounts/node1/accounts.dat
      dest: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/bin/
    when: inventory_hostname in groups['NODE1']

  - name: Accounts.dat to Node2
    copy:
      src: /var/lib/jenkins/workspace/go-dappley-ansible-accounts/node2/accounts.dat
      dest: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/bin/
    when: inventory_hostname in groups['NODE2']

  - name: Make build
    make:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley
      target: build
      file: /home/ubuntu/go/src/github.com/dappley/go-dappley/Makefile

  ## Launch blockchain 
  - name: Launch node1
    shell: ./dapp -f conf/node1.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE1']
    async: 150
    poll: 0

  - name: Launch node2
    shell: ./dapp -f conf/node2.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE2']
    async: 150
    poll: 0

  - name: Launch node3
    shell: ./dapp -f conf/node3.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE3']
    async: 150
    poll: 0

  - name: Launch node4
    shell: ./dapp -f conf/node4.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE4']
    async: 150
    poll: 0

  - name: Launch node5
    shell: ./dapp -f conf/node5.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE5']
    async: 150
    poll: 0

  - name: Wait 10 seconds to launch blockchain
    wait_for:
      timeout: 10

  - name: Wait til the blockchain reaches height of 10
    shell: ./cli getBlockchainInfo
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: blockchainHeight
    until: (blockchainHeight.stdout_lines[1][17:]|replace(',',''))|int > (10)|int
    retries: 20
    delay: 10

  - debug:
      msg: "Blockchain height: {{ blockchainHeight.stdout_lines[1][17:]|replace(',','') }}"

  ## Check account1 && account2 balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  ## SendFromMiner to account1 
  - name: Send money to account1
    shell: ./cli sendFromMiner -to {{ account1 }} -amount 100100
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    when: inventory_hostname in groups['NODE1']

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#################### Create Smart Contract ####################
  - name: Create smart contract
    shell: ./cli send -from {{ account1 }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -file ../jslib/step_recorder.js
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: smart_contract
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ smart_contract.stdout_lines[0][18:] }}'
    when: inventory_hostname in groups['NODE1']

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  ## Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 100000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 100000|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  ########## Fail :: This test results in unstable account balance [balance never stablizes] ##########
  ## No address in data 2
  - name: No address in data 2
    shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"function":"record","args":["500"]}'
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: deploy_contract
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ deploy_contract }}'
    when: inventory_hostname in groups['NODE1']

  - name: Transaction Test
    fail:
     msg: "Expected the transaction to fail but has been approved."
    when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout == "Transaction is sent! Pending approval from network."
    ignore_errors: true

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  # Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 100000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 100000|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  - name: Wait 10 seconds
    wait_for:
      timeout: 10

  # Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 100000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 100000|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  - name: Wait 10 seconds
    wait_for:
      timeout: 10

  # Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 100000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 100000|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  - name: Wait 10 seconds
    wait_for:
      timeout: 10

  # Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 100000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 100000|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  - name: Wait 10 seconds
    wait_for:
      timeout: 10

  # Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 100000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 100000|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  ## Wait for the tasks to terminate
  - name: Wait till async tasks terminate
    wait_for:
      timeout: 20

  ## Remove the db files and account.dat
  - name: Remove /go-dappley/bin All Nodes
    shell: rm -r bin
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/

  - name: Remove /go-dappley/dapp/bin Node1
    shell: rm -r bin
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/
    when: inventory_hostname in groups['NODE1']

  - name: Remove /go-dappley/dapp/bin Node2
    shell: rm -r bin
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/
    when: inventory_hostname in groups['NODE2']

  #  ------------------------------------------------------------

  ## Send account.dat file to Node1 && Node2
  - name: Accounts.dat to Node1
    copy:
      src: /var/lib/jenkins/workspace/go-dappley-ansible-accounts/node1/accounts.dat
      dest: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/bin/
    when: inventory_hostname in groups['NODE1']

  - name: Accounts.dat to Node2
    copy:
      src: /var/lib/jenkins/workspace/go-dappley-ansible-accounts/node2/accounts.dat
      dest: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/bin/
    when: inventory_hostname in groups['NODE2']

  - name: Make build
    make:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley
      target: build
      file: /home/ubuntu/go/src/github.com/dappley/go-dappley/Makefile

  ## Launch blockchain 
  - name: Launch node1
    shell: ./dapp -f conf/node1.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE1']
    async: 90
    poll: 0

  - name: Launch node2
    shell: ./dapp -f conf/node2.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE2']
    async: 90
    poll: 0

  - name: Launch node3
    shell: ./dapp -f conf/node3.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE3']
    async: 90
    poll: 0

  - name: Launch node4
    shell: ./dapp -f conf/node4.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE4']
    async: 90
    poll: 0

  - name: Launch node5
    shell: ./dapp -f conf/node5.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE5']
    async: 90
    poll: 0

  - name: Wait 10 seconds to launch blockchain
    wait_for:
      timeout: 10

  - name: Wait til the blockchain reaches height of 10
    shell: ./cli getBlockchainInfo
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: blockchainHeight
    until: (blockchainHeight.stdout_lines[1][17:]|replace(',',''))|int > (10)|int
    retries: 20
    delay: 10

  - debug:
      msg: "Blockchain height: {{ blockchainHeight.stdout_lines[1][17:]|replace(',','') }}"

  ## Check account1 && account2 balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  ## SendFromMiner to account1 
  - name: Send money to account1
    shell: ./cli sendFromMiner -to {{ account1 }} -amount 100100
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    when: inventory_hostname in groups['NODE1']

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#################### Create Smart Contract ####################
  - name: Create smart contract
    shell: ./cli send -from {{ account1 }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -file ../jslib/step_recorder.js
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: smart_contract
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ smart_contract.stdout_lines[0][18:] }}'
    when: inventory_hostname in groups['NODE1']

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  ## Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 100000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 100000|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  ########## Fail :: This test makes the node1 to crash [Entire blockchain breaks] ##########
  ## Empty address in data
  - name: Empty address in data
    shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"function":"record","args":["","500"]}'
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: deploy_contract
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ deploy_contract }}'
    when: inventory_hostname in groups['NODE1']

  - name: Transaction Test
    fail:
     msg: "Expected the transaction to fail but instead the blockchain has crashed."
    when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout[7:] == "server is not reachable!"
    ignore_errors: true

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  ## Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 100000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 100000|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  ## Wait for the tasks to terminate
  - name: Wait till async tasks terminate
    wait_for:
      timeout: 10

  ## Remove the db files and account.dat
  - name: Remove /go-dappley/bin All Nodes
    shell: rm -r bin
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/

  - name: Remove /go-dappley/dapp/bin Node1
    shell: rm -r bin
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/
    when: inventory_hostname in groups['NODE1']

  - name: Remove /go-dappley/dapp/bin Node2
    shell: rm -r bin
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/
    when: inventory_hostname in groups['NODE2']

  #  ------------------------------------------------------------

  ## Send account.dat file to Node1 && Node2
  - name: Accounts.dat to Node1
    copy:
      src: /var/lib/jenkins/workspace/go-dappley-ansible-accounts/node1/accounts.dat
      dest: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/bin/
    when: inventory_hostname in groups['NODE1']

  - name: Accounts.dat to Node2
    copy:
      src: /var/lib/jenkins/workspace/go-dappley-ansible-accounts/node2/accounts.dat
      dest: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/bin/
    when: inventory_hostname in groups['NODE2']

  - name: Make build
    make:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley
      target: build
      file: /home/ubuntu/go/src/github.com/dappley/go-dappley/Makefile

  ## Launch blockchain 
  - name: Launch node1
    shell: ./dapp -f conf/node1.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE1']
    async: 90
    poll: 0

  - name: Launch node2
    shell: ./dapp -f conf/node2.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE2']
    async: 90
    poll: 0

  - name: Launch node3
    shell: ./dapp -f conf/node3.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE3']
    async: 90
    poll: 0

  - name: Launch node4
    shell: ./dapp -f conf/node4.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE4']
    async: 90
    poll: 0

  - name: Launch node5
    shell: ./dapp -f conf/node5.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE5']
    async: 90
    poll: 0

  - name: Wait 10 seconds to launch blockchain
    wait_for:
      timeout: 10

  - name: Wait til the blockchain reaches height of 10
    shell: ./cli getBlockchainInfo
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: blockchainHeight
    until: (blockchainHeight.stdout_lines[1][17:]|replace(',',''))|int > (10)|int
    retries: 20
    delay: 10

  - debug:
      msg: "Blockchain height: {{ blockchainHeight.stdout_lines[1][17:]|replace(',','') }}"

  ## Check account1 && account2 balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  ## SendFromMiner to account1 
  - name: Send money to account1
    shell: ./cli sendFromMiner -to {{ account1 }} -amount 100100
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    when: inventory_hostname in groups['NODE1']

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#################### Create Smart Contract ####################
  - name: Create smart contract
    shell: ./cli send -from {{ account1 }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -file ../jslib/step_recorder.js
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: smart_contract
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ smart_contract.stdout_lines[0][18:] }}'
    when: inventory_hostname in groups['NODE1']

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  ## Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 100000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 100000|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  ########## Fail :: This test makes the node1 to crash [Entire blockchain breaks] ##########
  ## Amount in data is empty
  - name: Invalid address in data
    shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"function":"record","args":["account_2_address",""]}'
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: deploy_contract
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ deploy_contract }}'
    when: inventory_hostname in groups['NODE1']

  - name: Transaction Test
    fail:
     msg: "Expected the transaction to fail but instead the blockchain has crashed."
    when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout[7:] == "server is not reachable!"
    ignore_errors: true

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  ## Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 100000 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 100000|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  ## Wait for the tasks to terminate
  - name: Wait till async tasks terminate
    wait_for:
      timeout: 10

  ## Remove the db files and account.dat
  - name: Remove /go-dappley/bin All Nodes
    shell: rm -r bin
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/

  - name: Remove /go-dappley/dapp/bin Node1
    shell: rm -r bin
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/
    when: inventory_hostname in groups['NODE1']

  - name: Remove /go-dappley/dapp/bin Node2
    shell: rm -r bin
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/
    when: inventory_hostname in groups['NODE2']