---

- hosts: all
  become: true
  become_user: ubuntu
  environment:
    GOPATH: "/home/ubuntu/go"
    GOROOT: "/usr/local/go"
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/go/bin:/home/ubuntu/go/bin"
  vars:
    account1: dZmRE2UWEnB1hG85n9bUsZ7Z14Pp1ZFPPK
    account2: dcbtkT5UattbmRZqPqP6yobYy5mMi8HiHq
    invalid_address: thisistheaddressofaninvalidaddress

  tasks:
#################### Blockchain setup ####################

  ## Send account.dat file to Node1 && Node2
  - name: Accounts.dat to Node1
    copy:
      src: /var/lib/jenkins/workspace/go-dappley-ansible-accounts/node1/accounts.dat
      dest: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/bin/
    when: inventory_hostname in groups['NODE1']

  - name: Accounts.dat to Node2
    copy:
      src: /var/lib/jenkins/workspace/go-dappley-ansible-accounts/node2/accounts.dat
      dest: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/bin/
    when: inventory_hostname in groups['NODE2']

  - name: Make build
    make:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley
      target: build
      file: /home/ubuntu/go/src/github.com/dappley/go-dappley/Makefile

  ## Launch blockchain 
  - name: Launch node1
    shell: ./dapp -f conf/node1.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE1']
    async: 200
    poll: 0

  - name: Launch node2
    shell: ./dapp -f conf/node2.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE2']
    async: 200
    poll: 0

  - name: Launch node3
    shell: ./dapp -f conf/node3.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE3']
    async: 200
    poll: 0

  - name: Launch node4
    shell: ./dapp -f conf/node4.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE4']
    async: 200
    poll: 0

  - name: Launch node5
    shell: ./dapp -f conf/node5.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE5']
    async: 200
    poll: 0

  - name: Wait 10 seconds to launch blockchain
    wait_for:
      timeout: 10

  - name: Wait til the blockchain reaches height of 10
    shell: ./cli getBlockchainInfo
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: blockchainHeight
    until: (blockchainHeight.stdout_lines[1][17:]|replace(',',''))|int > (10)|int
    retries: 20
    delay: 10

  - debug:
      msg: "Blockchain height: {{ blockchainHeight.stdout_lines[1][17:]|replace(',','') }}"

  ## Check account1 && account2 balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  ## SendFromMiner to account1 
  - name: Send money to account1
    shell: ./cli sendFromMiner -to {{ account1 }} -amount 100000
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    when: inventory_hostname in groups['NODE1']

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#################### Create Smart Contract ####################
  - name: Create smart contract
    shell: ./cli send -from {{ account1 }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -file ../jslib/step_recorder.js
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: smart_contract
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ smart_contract.stdout_lines[0][18:] }}'
    when: inventory_hostname in groups['NODE1']

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  ## Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 99900 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 99900|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

#################### Invalid Data ####################

  ## Invalid address in data
  - name: Invalid address in data
    shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"function":"record","args":["thisistheaddressofaninvalidaddress","500"]}'
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: deploy_contract
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ deploy_contract }}'
    when: inventory_hostname in groups['NODE1']

  # - name: Transaction Test
  #   fail:
  #    msg: "Expected the transaction to fail but returned is approved."
  #   when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout == "Transaction is sent! Pending approval from network."
  #   ignore_errors: true

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  ## Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 99900 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 99900|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  ## Empty address in data
  - name: Empty address in data
    shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"function":"record","args":["","500"]}'
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: deploy_contract
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ deploy_contract }}'
    when: inventory_hostname in groups['NODE1']

  # - name: Transaction Test
  #   fail:
  #    msg: "Expected the transaction to fail but returned {{ deploy_contract.stdout }}"
  #   when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout[12:] != "the balance is insufficient"
  #   ignore_errors: true

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  ## Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 99900 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 99900|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  ## No address in data
  - name: No address in data
    shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"function":"record","args":["500"]}'
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: deploy_contract
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ deploy_contract }}'
    when: inventory_hostname in groups['NODE1']

  # - name: Transaction Test
  #   fail:
  #    msg: "Expected the transaction to fail but returned {{ deploy_contract.stdout }}"
  #   when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout[12:] != "the balance is insufficient"
  #   ignore_errors: true

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  ## Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 99900 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 99900|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  ## Negative amount in data
  - name: Invalid address in data
    shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"function":"record","args":["dcbtkT5UattbmRZqPqP6yobYy5mMi8HiHq","-500"]}'
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: deploy_contract
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ deploy_contract }}'
    when: inventory_hostname in groups['NODE1']

  # - name: Transaction Test
  #   fail:
  #    msg: "Expected the transaction to fail but returned {{ deploy_contract.stdout }}"
  #   when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout[12:] != "the balance is insufficient"
  #   ignore_errors: true

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  ## Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 99900 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 99900|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  ## Over balance amount in data
  - name: Invalid address in data
    shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"function":"record","args":["dcbtkT5UattbmRZqPqP6yobYy5mMi8HiHq","500000"]}'
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: deploy_contract
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ deploy_contract }}'
    when: inventory_hostname in groups['NODE1']

  # - name: Transaction Test
  #   fail:
  #    msg: "Expected the transaction to fail but returned {{ deploy_contract.stdout }}"
  #   when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout[12:] != "the balance is insufficient"
  #   ignore_errors: true

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  ## Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 99900 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 99900|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  ## Amount in data is empty
  - name: Invalid address in data
    shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"function":"record","args":["dcbtkT5UattbmRZqPqP6yobYy5mMi8HiHq",""]}'
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: deploy_contract
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ deploy_contract }}'
    when: inventory_hostname in groups['NODE1']

  # - name: Transaction Test
  #   fail:
  #    msg: "Expected the transaction to fail but returned {{ deploy_contract.stdout }}"
  #   when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout[12:] != "the balance is insufficient"
  #   ignore_errors: true

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  ## Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 99900 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 99900|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  ## No balance amount in data
  - name: Invalid address in data
    shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"function":"record","args":["dcbtkT5UattbmRZqPqP6yobYy5mMi8HiHq"]}'
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: deploy_contract
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ deploy_contract }}'
    when: inventory_hostname in groups['NODE1']

  # - name: Transaction Test
  #   fail:
  #    msg: "Expected the transaction to fail but returned {{ deploy_contract.stdout }}"
  #   when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout[12:] != "the balance is insufficient"
  #   ignore_errors: true

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  ## Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 99900 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 99900|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  ## Invalid argument
  - name: Invalid address in data
    shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"this":"is","test":["dcbtkT5UattbmRZqPqP6yobYy5mMi8HiHq","500"]}'
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: deploy_contract
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ deploy_contract }}'
    when: inventory_hostname in groups['NODE1']

  # - name: Transaction Test
  #   fail:
  #    msg: "Expected the transaction to fail but returned {{ deploy_contract.stdout }}"
  #   when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout[12:] != "the balance is insufficient"
  #   ignore_errors: true

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  ## Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 99900 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 99900|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

  ## No data
  - name: Invalid address in data
    shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data 
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: deploy_contract
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ deploy_contract }}'
    when: inventory_hostname in groups['NODE1']

  # - name: Transaction Test
  #   fail:
  #    msg: "Expected the transaction to fail but returned {{ deploy_contract.stdout }}"
  #   when: inventory_hostname in groups['NODE1'] and deploy_contract.stdout[12:] != "the balance is insufficient"
  #   ignore_errors: true

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  ## Check accounts balance
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected 99900 but returned {{ account1Balance.stdout_lines[0][16:] }}"
    when: account1Balance.stdout_lines[0][16:]|int != 99900|int
    ignore_errors: true

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true

#################### Closing ####################

  ## Wait for the tasks to terminate
  - name: Wait till async tasks terminate
    wait_for:
      timeout: 30

  ## Remove the db files and account.dat
  - name: Remove /go-dappley/bin All Nodes
    shell: rm -r bin
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/

  - name: Remove /go-dappley/dapp/bin Node1
    shell: rm -r bin
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/
    when: inventory_hostname in groups['NODE1']

  - name: Remove /go-dappley/dapp/bin Node2
    shell: rm -r bin
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/
    when: inventory_hostname in groups['NODE2']