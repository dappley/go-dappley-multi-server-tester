---

- hosts: all
  become: true
  become_user: ubuntu
  environment:
    GOPATH: "/home/ubuntu/go"
    GOROOT: "/usr/local/go"
    PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/go/bin:/home/ubuntu/go/bin"
  vars:
    account1: account_1_address
    account2: account_2_address

  tasks:
#################### Send account.dat file to Node1 && Node2 ####################
  - name: Accounts.dat to Node1
    copy:
      src: /var/lib/jenkins/workspace/go-dappley-ansible-accounts/node1/accounts.dat
      dest: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/bin/
    when: inventory_hostname in groups['NODE1']

  - name: Accounts.dat to Node2
    copy:
      src: /var/lib/jenkins/workspace/go-dappley-ansible-accounts/node2/accounts.dat
      dest: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/bin/
    when: inventory_hostname in groups['NODE2']

  - name: Make build
    make:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley
      target: build
      file: /home/ubuntu/go/src/github.com/dappley/go-dappley/Makefile

#################### Launch blockchain ####################
  - name: Launch node1
    shell: ./dapp -f conf/node1.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE1']
    async: 110
    poll: 0

  - name: Launch node2
    shell: ./dapp -f conf/node2.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE2']
    async: 110
    poll: 0

  - name: Launch node3
    shell: ./dapp -f conf/node3.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE3']
    async: 110
    poll: 0

  - name: Launch node4
    shell: ./dapp -f conf/node4.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE4']
    async: 110
    poll: 0

  - name: Launch node5
    shell: ./dapp -f conf/node5.conf
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp
    when: inventory_hostname in groups['NODE5']
    async: 110
    poll: 0

  - name: Wait 10 seconds to launch blockchain
    wait_for:
      timeout: 10

  - name: Wait til the blockchain reaches height of 10
    shell: ./cli getBlockchainInfo
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: blockchainHeight
    until: (blockchainHeight.stdout_lines[1][17:]|replace(',',''))|int > (10)|int
    retries: 20
    delay: 10


#################### SendFromMiner to account1  ####################
  - name: Send money to account1
    shell: ./cli sendFromMiner -to {{ account1 }} -amount 100000
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    when: inventory_hostname in groups['NODE1']

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10

  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance

  - debug:
      msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#################### Create smart contract 1 ####################
  - name: Create smart contract 1
    shell: ./cli send -from {{ account1 }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -file ../jslib/step_recorder.js
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: smart_contract_1
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ smart_contract_1.stdout_lines[0][18:] }}'
    when: inventory_hostname in groups['NODE1']

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10


#################### Check account1 && account2 balance ####################
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance_1

  - debug:
      msg: 'Account1 balance: {{ account1Balance_1.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected the value to be less than 99900 and greater than 69900, but returned {{ account1Balance_1.stdout_lines[0][16:] }}."
    ignore_errors: true
    when: not account1Balance_1.stdout_lines[0][16:]|int < (100000 - 100)|int and account1Balance.stdout_lines[0][16:]|int > (100000 - 30000 - 100)|int


  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true


#################### Create smart contract 2 ####################
  - name: Create smart contract 2
    shell: ./cli send -from {{ account1 }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -file ../jslib/step_recorder.js
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: smart_contract_2
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ smart_contract_2.stdout_lines[0][18:] }}'
    when: inventory_hostname in groups['NODE1']

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10


#################### Check account1 && account2 balance ####################
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance_2

  - debug:
      msg: 'Account1 balance: {{ account1Balance_2.stdout_lines[0][16:] }}'

## TODO conditional is returning error
  - name: Account1 balance test
    fail:
     msg: "Expected the value to be less than 99900 and greater than 69900, but returned {{ account1Balance_2.stdout_lines[0][16:] }}."
    ignore_errors: true
    when: not account1Balance_2.stdout_lines[0][16:]|int < (account1Balance_1.stdout_lines[0][16:]|int - 100|int) and account1Balance_2.stdout_lines[0][16:]|int > (account1Balance_1.stdout_lines[0][16:]|int - 30000|int - 100|int)

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 0|int
    ignore_errors: true


#################### Estimate Gas 1 ####################
  - name: Estimate Gas 1
    shell: ./cli estimateGas -from {{ account1 }} -to {{ smart_contract_1.stdout_lines[0][18:] }} -amount 10 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"function":"record","args":["account_2_address","5000"]}'
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: estimate_gas_1
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ estimate_gas_1.stdout_lines[0][19:] }}'
    when: inventory_hostname in groups['NODE1']


#################### Deploy smart contract ####################
  - name: Deploy smart contract with estimated amount
    shell: ./cli send -from {{ account1 }} -to {{ smart_contract_1.stdout_lines[0][18:] }} -amount 10 -tip 0 -gasLimit {{ estimate_gas_1.stdout_lines[0][19:] }} -gasPrice 1 -data '{"function":"record","args":["account_2_address","5000"]}'
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: deploy_smart_contract_1
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ deploy_smart_contract_1 }}'
    when: inventory_hostname in groups['NODE1']

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10


#################### Check account1 && account2 balance ####################
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance_3

  - debug:
      msg: 'Account1 balance: {{ account1Balance_3.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected the value to be less than 99900 and greater than 69900, but returned {{ account1Balance_3.stdout_lines[0][16:] }}."
    ignore_errors: true
    when: inventory_hostname in groups['NODE1'] and account1Balance_3.stdout_lines[0][16:]|int != (account1Balance_2.stdout_lines[0][16:]|int - estimate_gas_1.stdout_lines[0][19:]|int - 10|int)|int

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 5000|int
    ignore_errors: true


#################### Estimate Gas 2 ####################
  - name: Estimate Gas 2
    shell: ./cli estimateGas -from {{ account1 }} -to {{ smart_contract_2.stdout_lines[0][18:] }} -amount 10 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"function":"record","args":["account_2_address","5000"]}'
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: estimate_gas_2
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ estimate_gas_2.stdout_lines[0][19:] }}'
    when: inventory_hostname in groups['NODE1']


#################### Deploy smart contract ####################
  - name: Deploy smart contract with estimated amount
    shell: ./cli send -from {{ account1 }} -to {{ smart_contract_2.stdout_lines[0][18:] }} -amount 10 -tip 0 -gasLimit {{ estimate_gas_2.stdout_lines[0][19:] }} -gasPrice 1 -data '{"function":"record","args":["account_2_address","5000"]}'
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: deploy_smart_contract_2
    when: inventory_hostname in groups['NODE1']

  - debug:
      msg: '{{ deploy_smart_contract_2 }}'
    when: inventory_hostname in groups['NODE1']

  - name: Wait 10 seconds to complete transaction
    wait_for:
      timeout: 10


#################### Check account1 && account2 balance ####################
  - name: Check account1 balance
    shell: ./cli getBalance -address {{ account1 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account1Balance_4

  - debug:
      msg: 'Account1 balance: {{ account1Balance_4.stdout_lines[0][16:] }}'

  - name: Account1 balance test
    fail:
     msg: "Expected the value to be less than 99900 and greater than 69900, but returned {{ account1Balance_4.stdout_lines[0][16:] }}."
    ignore_errors: true
    when: inventory_hostname in groups['NODE1'] and account1Balance_4.stdout_lines[0][16:]|int != (account1Balance_3.stdout_lines[0][16:]|int - estimate_gas_2.stdout_lines[0][19:]|int - 10|int)|int

  - name: Check account2 balance
    shell: ./cli getBalance -address {{ account2 }}
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
    register: account2Balance

  - debug:
      msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

  - name: Account2 balance test
    fail:
     msg: "Expected 0 but returned {{ account2Balance.stdout_lines[0][16:] }}"
    when: account2Balance.stdout_lines[0][16:]|int != 10000|int
    ignore_errors: true

# #################### Deploy smart contract ####################
#   - name: Deploy smart contract
#     shell: ./cli send -from {{ account1 }} -to {{ smart_contract.stdout_lines[0][18:] }} -amount 100 -tip 0 -gasLimit 30000 -gasPrice 1 -data '{"function":"record","args":["account_2_address","5000"]}'
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: deploy_contract
#     when: inventory_hostname in groups['NODE1']

#   - debug:
#       msg: '{{ deploy_contract }}'
#     when: inventory_hostname in groups['NODE1']

#   - name: Wait 10 seconds to complete transaction
#     wait_for:
#       timeout: 10

# #################### Check account1 && account2 balance ####################
#   - name: Check account1 balance
#     shell: ./cli getBalance -address {{ account1 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account1Balance

#   - debug:
#       msg: 'Account1 balance: {{ account1Balance.stdout_lines[0][16:] }}'

#   - name: Account1 balance test
#     fail:
#      msg: "Expected to be greater or equal to 34900, but returned {{ account1Balance.stdout_lines[0][16:] }}"
#     when: account1Balance.stdout_lines[0][16:]|int < 34900|int
#     ignore_errors: true

#   - name: Check account2 balance
#     shell: ./cli getBalance -address {{ account2 }}
#     args:
#       chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/cli
#     register: account2Balance

#   - debug:
#       msg: 'Account2 blanace: {{ account2Balance.stdout_lines[0][16:] }}'

#   - name: Account2 balance test
#     fail:
#      msg: "Expected 5000 but returned {{ account2Balance.stdout_lines[0][16:] }}"
#     when: account2Balance.stdout_lines[0][16:]|int != 5000|int
#     ignore_errors: true

#################### Terminate playbook ####################
  - name: Wait till async tasks terminate
    wait_for:
      timeout: 20

  - name: Remove /go-dappley/bin All Nodes
    shell: rm -r bin
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/

  - name: Remove /go-dappley/dapp/bin Node1
    shell: rm -r bin
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/
    when: inventory_hostname in groups['NODE1']

  - name: Remove /go-dappley/dapp/bin Node2
    shell: rm -r bin
    args:
      chdir: /home/ubuntu/go/src/github.com/dappley/go-dappley/dapp/
    when: inventory_hostname in groups['NODE2']